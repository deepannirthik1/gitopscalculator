name: Deploy to ECS

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Get AWS region
        id: get-region
        run: |
          echo "::set-output name=region::$(aws configure get region)"

      - name: Check ECS Cluster existence
        id: check-cluster
        run: |
          aws ecs describe-clusters --clusters DevCluster --query 'clusters[0].clusterArn' --output text || echo "::set-output name=cluster-exists::false"

      - name: Create ECS Cluster
        run: |
          if [[ "${{ steps.check-cluster.outputs.cluster-exists }}" != "false" ]]; then
            echo "Cluster already exists. Skipping creation."
          else
            aws ecs create-cluster --cluster-name DevCluster
          fi

      - name: Check ECS Service existence
        id: check-service
        run: |
          aws ecs describe-services --cluster DevCluster --services DevClusterService --query 'services[0].serviceArn' --output text || echo "::set-output name=service-exists::false"

      - name: Check Task Definition existence
        id: check-task-definition
        run: |
          aws ecs describe-task-definition --task-definition DevClusterTask --query 'taskDefinition.taskDefinitionArn' --output text || echo "::set-output name=task-definition-exists::false"

      - name: Create or Update Task Definition
        run: |
          if [[ "${{ steps.check-task-definition.outputs.task-definition-exists }}" != "false" ]]; then
            echo "Task Definition already exists. Skipping creation."
          else
            aws ecs register-task-definition --cli-input-json file://aws/task-definition.json
          fi

      - name: Create or Update ECS Service
        run: |
          if [[ "${{ steps.check-service.outputs.service-exists }}" != "false" ]]; then
            echo "Service already exists. Updating the service with the latest task definition."
            aws ecs update-service --cluster DevCluster --service DevClusterService --force-new-deployment --task-definition DevClusterTaskDefinition
          else
            echo "Service does not exist. Creating a new service with the latest task definition."
            aws ecs create-service --cluster DevCluster --service-name DevClusterService --task-definition DevClusterTaskDefinition --desired-count 1
          fi
